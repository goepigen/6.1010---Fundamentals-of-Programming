# 6.101 recitation: lab 6 midpoint

############################# Grammars

grammar =  { "SENTENCE": [["NOUN", "VERB"], ["NOUN", "never", "VERB"]],
             "NOUN":     [["pigs"], ["professors"]],
             "VERB":     [["fly"], ["think"]] }

def all_phrases(grammar, root):
    """
    Using the production rules from grammar, and given a root nonterminal (string),
    expands root into all legal phrases allowed by the grammar
    as a list of lists of literal words (e.g. [["pigs", "fly"], ["professors", "think"], ...])
    """

    pass












grammar =  { "SENTENCE": [["NOUN", "VERB"], ["NOUN", "never", "VERB"]],
             "NOUN":     [["pigs"], ["professors"]],
             "VERB":     [["fly"], ["think"]] }

def all_phrases_of_list(grammar, lst):
    """
    lst is a list of nonterminals and/or words.
    Returns all legal phrases that can be generated by expanding nonterminals in lst.
    """
    first_possibilities = all_phrases(grammar, lst[0])
    rest_possibilities = all_phrases_of_list(grammar, lst[1:])

    # now we need to combine first_possibilities and rest_possibilities
    # also need a base case

def all_phrases(grammar, root):
    """
    Using the production rules from grammar, and given a root nonterminal (string),
    expands root into all legal phrases allowed by the grammar
    as a list of lists of literal words (e.g. [["pigs", "fly"], ["professors", "think"], ...])
    """
    # call all_phrases_of_list(), then recombine
    pass
